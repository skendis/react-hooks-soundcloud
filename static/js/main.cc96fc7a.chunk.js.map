{"version":3,"sources":["components/ui/Player.js","components/ImageContainer.js","components/RecentContainer.js","store/types.js","services/soundcloudService.js","store/actions/searchActions.js","components/ui/SearchBar.js","components/ui/ResultPreview.js","components/ui/ResultsList.js","components/SearchContainer.js","App.js","serviceWorker.js","store/reducers/searchReducer.js","store/reducers/index.js","index.js"],"names":["PlayerWidget","songUrl","result","url","playerSrc","className","width","height","scrolling","title","allow","src","connect","selectedResult","searchReducer","artwork","alt","Player","recentSearchTerms","searchList","map","term","idx","key","length","types","FETCH_SONGS","SWITCH_TILE_VIEW","ADD_RECENT_SEARCH","SET_SELECTED_RESULT","CLIENT_ID","ENDPOINT","LIMIT","getSearchResults","a","_getRequest","res","axios","get","data","setSelected","type","fetchSearchResults","dispatch","soundcloudService","then","response","AddToRecentSearch","catch","error","useState","searchText","setSearchText","placeholder","value","onChange","event","target","onClick","isTileView","uri","artwork_url","ResultsList","list","results","searchResults","collection","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","initialState","action","combinedReducer","combineReducers","store","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","render","document","getElementById","addEventListener","e","prompt","URL","process","href","origin","fetch","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.cc96fc7a.chunk.js","sourcesContent":["import React from 'react';\nfunction PlayerWidget({ result }) {\n\tconst songUrl = result.url;\n\tconst playerSrc = `https://w.soundcloud.com/player/?url=${songUrl}&color=%23ff5500&auto_play=true&hide_related=false&show_comments=true&show_user=true&show_reposts=false&show_teaser=true&visual=true`;\n\tif(songUrl){\n\t\treturn(\n\t\t\t<div className=\"hide-below\">\n\t\t\t<iframe\n\t\t\t\twidth=\"100%\"\n\t\t\t\theight=\"300\"\n\t\t\t\tscrolling=\"no\"\n\t\t\t\ttitle=\"player\"\n\t\t\t\tallow=\"autoplay\"\n\t\t\t\tsrc={playerSrc}\n\t\t\t/>\n\t\t</div>\n\t\t)\n\t}else{\n\t\treturn(<div></div>)\n\t}\n}\n\nexport default PlayerWidget;\n","import React from 'react';\nimport Player from './ui/Player.js';\nimport { connect } from 'react-redux';\nfunction ImageContainer({ selectedResult }) {\n\treturn (\n\t\t<div className=\"image-container flex justify-center align-center column\">\n\t\t\t<div className=\"art-work\">\n\t\t\t\t<img src={selectedResult.artwork} alt=\"\" />\n\t\t\t\t<Player result={selectedResult} />\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nconst mapStateToProps = ({ searchReducer }) => {\n\tconst { selectedResult } = searchReducer;\n\treturn {\n\t\tselectedResult\n\t};\n};\nexport default connect(mapStateToProps)(ImageContainer);\n","import React from 'react';\nimport { connect } from 'react-redux';\nfunction RecentContainer({recentSearchTerms}) {\n\tconst searchList = recentSearchTerms.map((term,idx) => {\n\t\treturn <li key={idx}>{term}</li>;\n\t});\n\treturn (\n\t\t<div className=\"recent-container\">\n\t\t\t<h1>Recent Searches:</h1>\n\t\t\t<ul className=\"clean-list\">{searchList.length?searchList:\"none\"}</ul>\n\t\t</div>\n\t);\n}\n\nconst mapStateToProps = ({ searchReducer }) => {\n\tconst { recentSearchTerms } = searchReducer;\n\n\treturn {\n\t\trecentSearchTerms\n\t};\n};\n\nexport default connect(mapStateToProps)(RecentContainer);\n","const types = {\n\tFETCH_SONGS: 'FETCH_SONGS',\n    SWITCH_TILE_VIEW: 'SWITCH_TILE_VIEW',\n    ADD_RECENT_SEARCH: 'ADD_RECENT_SEARCH',\n    SET_SELECTED_RESULT:'SET_SELECTED_RESULT'\n};\nexport default types;\n","import axios from 'axios';\nconst CLIENT_ID = 'ggX0UomnLs0VmW7qZnCzw';\nconst ENDPOINT = 'https://api.soundcloud.com';\nconst LIMIT = 7;\nexport default {\n\tgetSearchResults\n};\n\nasync function getSearchResults(term) {\n\tconst res = await _getRequest(`${ENDPOINT}/tracks?client_id=${CLIENT_ID}&q=${term}&limit=${LIMIT}&linked_partitioning=1`);\n\treturn res;\n}\n\nasync function _getRequest(url) {\n\tconst res = await axios.get(url);\n\treturn res.data;\n}\n","import types from '../types.js';\nimport soundcloudService from '../../services/soundcloudService.js';\n\nexport const setSearchResults = (data) => {\n\treturn {\n\t\ttype: types.FETCH_SONGS,\n\t\tdata\n\t};\n};\nexport const AddToRecentSearch = (term) => {\n\treturn {\n\t\ttype: types.ADD_RECENT_SEARCH,\n\t\tterm\n\t};\n};\nexport const setSelected = (data) => {\n\treturn {\n\t\ttype: types.SET_SELECTED_RESULT,\n\t\tdata\n\t};\n};\nexport const fetchSearchResults = (term) => {\n\treturn (dispatch) => {\n\t\treturn soundcloudService\n\t\t\t.getSearchResults(term)\n\t\t\t.then((response) => {\n\t\t\t\tdispatch(setSearchResults(response));\n\t\t\t\tdispatch(AddToRecentSearch(term));\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tthrow error;\n\t\t\t});\n\t};\n};\n","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchSearchResults } from '../../store/actions/searchActions.js';\n\nfunction SearchBar({ dispatch }) {\n\tconst [ searchText, setSearchText ] = useState('');\n\tconst handleSubmit = () => {\n\t\tif (searchText) dispatch(fetchSearchResults(searchText));\n\t};\n\tconst handleChange = (event) => {\n\t\tsetSearchText(event.target.value);\n\t};\n\treturn (\n\t\t<div className=\"search-bar\">\n\t\t\t<input type=\"text\" className=\"search-input\" placeholder=\"search\" value={searchText} onChange={handleChange} />\n\t\t\t<button className=\"primary-btn\" onClick={handleSubmit}>GO</button>\n\t\t</div>\n\t);\n}\n\nexport default connect()(SearchBar);\n","import React from 'react';\nimport { setSelected } from '../../store/actions/searchActions.js';\nimport { connect } from 'react-redux';\nfunction ResultPreview({ result, isTileView, dispatch }) {\n\tconst setResult = () => {\n\t\tdispatch(setSelected({ url: result.uri, artwork: result.artwork_url }));\n\t};\n\n\treturn (\n\t\t<li className=\"result-preview flex space-between align-center\" onClick={setResult}>\n\t\t\t<p>{result.title}</p>\n\t\t\t{isTileView ? <img src={result.artwork_url} alt=\"\" /> : ''}\n\t\t</li>\n\t);\n}\n\nconst mapStateToProps = ({ searchReducer }) => {\n\tconst { isTileView } = searchReducer;\n\n\treturn {\n\t\tisTileView\n\t};\n};\n\nexport default connect(mapStateToProps)(ResultPreview);\n","import React from 'react';\nimport ResultPreview from './ResultPreview.js';\n\nfunction ResultsList({ results}) {\n\tconst list = results.map((result,idx) => {\n\t\treturn <ResultPreview result={result} key={idx} />;\n\t});\n\treturn <ul>{list.length ? list : ''}</ul>;\n}\nexport default ResultsList;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport SearchBar from './ui/SearchBar.js';\nimport ResultsList from './ui/ResultsList';\n\nfunction SearchContainer({ searchResults}) {\n\treturn (\n\t\t<div>\n\t\t\t<SearchBar />\n\t\t\t<ResultsList results={searchResults.collection?searchResults.collection:[]} />\n\t\t</div>\n\t);\n}\n\nconst mapStateToProps = ({ searchReducer }) => {\n\tconst { searchResults } = searchReducer;\n\n\treturn {\n\t\tsearchResults\n\t};\n};\nexport default connect(mapStateToProps)(SearchContainer);\n","import React from 'react';\nimport ImageContainer from './components/ImageContainer.js'\nimport RecentContainer from './components/RecentContainer.js'\nimport SearchContainer from './components/SearchContainer.js'\nimport AppStyle from './styles/style.scss';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SearchContainer/>\n      <ImageContainer/>\n      <RecentContainer/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import types from '../types.js';\n\nconst initialState = {\n\trecentSearchTerms: [],\n\tsearchResults: {},\n\tisTileView: true,\n\tselectedResult: {}\n};\n\nconst searchReducer = (state = initialState, action) => {\n\tswitch (action.type) {\n\t\tcase types.FETCH_SONGS:\n\t\t\treturn { ...state, searchResults: action.data };\n\t\tcase types.SWITCH_TILE_VIEW:\n\t\t\treturn { ...state, isTileView: action.value };\n\t\tcase types.SET_SELECTED_RESULT:\n\t\t\treturn { ...state, selectedResult: action.data };\n\t\tcase types.ADD_RECENT_SEARCH:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\trecentSearchTerms: [ ...state.recentSearchTerms, action.term ]\n\t\t\t};\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\nexport default searchReducer;\n","import { combineReducers } from 'redux';\nimport searchReducer from './searchReducer';\n\nconst combinedReducer = combineReducers({\n\tsearchReducer\n});\n\nexport default combinedReducer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, applyMiddleware } from 'redux';\nimport rootReducer from './store/reducers';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>,\n\tdocument.getElementById('root')\n);\n\nwindow.addEventListener('beforeinstallprompt', (e) => {\n\tconsole.log('beforeinstallprompt event has fired');\n\te.prompt();\n});\nserviceWorker.register();\n"],"sourceRoot":""}